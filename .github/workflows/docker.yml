name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # Required for MCP registry OIDC authentication

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate server.json against MCP schema
        run: |
          pip install check-jsonschema
          check-jsonschema --schemafile https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json server.json

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from pyproject.toml
        id: version
        run: |
          VERSION=$(grep -m 1 'version = ' pyproject.toml | cut -d'"' -f2)
          REV_COUNT=$(git rev-list --count HEAD)
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9-]/-/g')
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_full=$VERSION-$REV_COUNT.$BRANCH_NAME.$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.version }},enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.version_full }},enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/mips64le,linux/mips64,linux/loong64,linux/arm/v7,linux/arm/v6
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update server.json version
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION="${{ steps.version.outputs.version_full }}"
          # Replace INVALID_PLACEHOLDER with actual version in OCI identifier and update server version
          python3 << 'PYTHON_SCRIPT'
          import json
          with open('server.json', 'r') as f:
              data = json.load(f)
          data['version'] = '${{ steps.version.outputs.version_full }}'
          for package in data.get('packages', []):
              if package.get('registryType') == 'oci':
                  # Replace placeholder with actual version tag in identifier
                  # Note: OCI packages must NOT have a separate 'version' field
                  package['identifier'] = package['identifier'].replace('INVALID_PLACEHOLDER', '${{ steps.version.outputs.version_full }}')
          with open('server.json', 'w') as f:
              json.dump(data, f, indent=2)
          print(f'Updated server.json to version ${{ steps.version.outputs.version_full }}')
          PYTHON_SCRIPT
          cat server.json

      - name: Install MCP Publisher
        if: github.ref == 'refs/heads/main'
        run: |
          curl -L "https://github.com/modelcontextprotocol/registry/releases/latest/download/mcp-publisher_$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/').tar.gz" | tar xz mcp-publisher

      - name: Login to MCP Registry
        if: github.ref == 'refs/heads/main'
        run: ./mcp-publisher login github-oidc

      - name: Publish to MCP Registry
        if: github.ref == 'refs/heads/main'
        run: ./mcp-publisher publish
